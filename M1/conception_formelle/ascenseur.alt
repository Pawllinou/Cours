const nbFloors = 4;

node Button
    state light : bool : public;
    init  light := false;
    event turnoff;
          push  : public;
    trans true |- push    -> light := true;
          true |- turnoff -> light := false;
edon

node DoorPerfect //peut pas tomber en panne
    state isOpen : bool : public;
    init  isOpen := false;
    event open, close;
    trans true |- open  -> isOpen := true;
          true |- close -> isOpen := false;
edon

node Door //peut tomber en panne
    state isOpen  : bool : public;
          stucked : bool;
    init isOpen := false, stucked := false;
    event open, close;
    trans ~stucked |- open  -> isOpen := true;
          ~stucked |- close -> isOpen := false;
          ~stucked |- open  -> stucked := true;
          ~stucked |- close -> stucked := true;
          stucked  |- open  -> ;
          stucked  |- close -> ;
edon

node Floor
    sub B : Button;
        D : Door;
    event close, open;
    trans D.isOpen  |- close -> ;
          ~D.isOpen |- open  -> ;
    sync <close, D.close, B.turnoff>;
         <open, D.open>;
edon

node Lift
    sub B : Button[nbFloors];
        D : Door;
    state level : [0,nbFloors-1] : public;
    init  level = 0;
    event close[nbFloors], open;
          down, up;
    trans D.isOpen & level=0 |- close[0] -> ;
          D.isOpen & level=1 |- close[1] -> ;
          D.isOpen & level=2 |- close[2] -> ;
          D.isOpen & level=3 |- close[3] -> ;
          ~D.isOpen |- open -> ;
          ~D.isOpen |- down -> level := level - 1;
          ~D.isOpen |- up   -> level := level + 1;
    sync <close[0], D.close, B[0].turnoff>;
         <close[1], D.close, B[1].turnoff>;
         <close[2], D.close, B[2].turnoff>;
         <close[3], D.close, B[3].turnoff>;
         <open, D.open>;

edon

node BuildingV0
    sub    F : Floor[nbFloors];
           L : Lift;
    event  open [nbFloors];   //crée un conflit notP7 : ouverture et mouvement possible
           down, up;
    flow   request : bool[nbFloors];
           requestDown, requestUp : bool;
    assert request[0]  = (F[0].B.light | L.B[0].light);
           request[1]  = (F[1].B.light | L.B[1].light);
           request[2]  = (F[2].B.light | L.B[2].light);
           request[3]  = (F[3].B.light | L.B[3].light);
           requestDown = ((request[0] & L.level > 0)|
                          (request[1] & L.level > 1)|
                          (request[2] & L.level > 2));
           requestUp   = ((request[3] & L.level < 3)|
                          (request[2] & L.level < 2)|
                          (request[1] & L.level < 1));
    trans  L.level=0 & request[0] |- open[0] -> ;
           L.level=1 & request[1] |- open[1] -> ;
           L.level=2 & request[2] |- open[2] -> ;
           L.level=3 & request[3] |- open[3] -> ;
           requestDown |- down -> ;
           requestUp   |- up -> ;
    sync   <F[0].close, L.close[0]>;
           <F[1].close, L.close[1]>;
           <F[2].close, L.close[2]>;
           <F[3].close, L.close[3]>;
           <open[0], F[0].open, L.open>;
           <open[1], F[1].open, L.open>;
           <open[2], F[2].open, L.open>;
           <open[3], F[3].open, L.open>;
           <down, L.down>;
           <up, L.up>;
edon

node BuildingV1
    sub    F : Floor[nbFloors];
           L : Lift;
    event  open [nbFloors] > {down, up};  //indique que l'ouverture est prioritaire sur le mouvement
    flow   request : bool[nbFloors];
           requestDown, requestUp : bool;
    assert request[0]  = (F[0].B.light | L.B[0].light);
           request[1]  = (F[1].B.light | L.B[1].light);
           request[2]  = (F[2].B.light | L.B[2].light);
           request[3]  = (F[3].B.light | L.B[3].light);
           requestDown = ((request[0] & L.level > 0)|
                          (request[1] & L.level > 1)|
                          (request[2] & L.level > 2));
           requestUp   = ((request[3] & L.level < 3)|
                          (request[2] & L.level < 2)|
                          (request[1] & L.level < 1));
    trans  L.level=0 & request[0] |- open[0] -> ;
           L.level=1 & request[1] |- open[1] -> ;
           L.level=2 & request[2] |- open[2] -> ;
           L.level=3 & request[3] |- open[3] -> ;
           requestDown |- down -> ;
           requestUp   |- up -> ;
    sync   <F[0].close, L.close[0]>;
           <F[1].close, L.close[1]>;
           <F[2].close, L.close[2]>;
           <F[3].close, L.close[3]>;
           <open[0], F[0].open, L.open>;
           <open[1], F[1].open, L.open>;
           <open[2], F[2].open, L.open>;
           <open[3], F[3].open, L.open>;
           <down, L.down>;
           <up, L.up>;
edon

node BuildingV2
    sub    F : Floor[nbFloors];
           L : Lift;
    event  open [nbFloors] > {down, up};
    state  lastMoveIsUp : bool; //stock le dernier mouvement afin de valider P8
    init   lastMoveIsUp := false;
    flow   request : bool[nbFloors];
           requestDown, requestUp : bool;
    assert request[0]  = (F[0].B.light | L.B[0].light);
           request[1]  = (F[1].B.light | L.B[1].light);
           request[2]  = (F[2].B.light | L.B[2].light);
           request[3]  = (F[3].B.light | L.B[3].light);
           requestDown = ((request[0] & L.level > 0)|
                          (request[1] & L.level > 1)|
                          (request[2] & L.level > 2));
           requestUp   = ((request[3] & L.level < 3)|
                          (request[2] & L.level < 2)|
                          (request[1] & L.level < 1));
    trans  L.level=0 & request[0] |- open[0] -> ;
           L.level=1 & request[1] |- open[1] -> ;
           L.level=2 & request[2] |- open[2] -> ;
           L.level=3 & request[3] |- open[3] -> ;
           ~lastMoveIsUp & requestDown              |- down -> lastMoveIsUp := false;
           lastMoveIsUp  & requestDown & ~requestUp |- down -> lastMoveIsUp := false;
           lastMoveIsUp  & requestUp                |- up   -> lastMoveIsUp := true;
           ~lastMoveIsUp & requestUp & ~requestDown |- up   -> lastMoveIsUp := true;
    sync   <F[0].close, L.close[0]>;
           <F[1].close, L.close[1]>;
           <F[2].close, L.close[2]>;
           <F[3].close, L.close[3]>;
           <open[0], F[0].open, L.open>;
           <open[1], F[1].open, L.open>;
           <open[2], F[2].open, L.open>;
           <open[3], F[3].open, L.open>;
           <down, L.down>;
           <up, L.up>;
edon

node Building
    sub    F : Floor[nbFloors];
           L : Lift;
    event  open [nbFloors] > {down, up};
    state  lastMoveIsUp : bool;
    init   lastMoveIsUp := false;
    flow   request : bool[nbFloors];
           requestDown, requestUp : bool;
           doorsAreClosed : bool;  //permet la gestion des pannes en liant les portes intérieures et extérieures, et permet ainsi de valider P3 et P7 avec des portes cassables.
    assert request[0] = (F[0].B.light | L.B[0].light);
           request[1] = (F[1].B.light | L.B[1].light);
           request[2] = (F[2].B.light | L.B[2].light);
           request[3] = (F[3].B.light | L.B[3].light);
           requestDown = ((request[0] & L.level > 0)|
                          (request[1] & L.level > 1)|
                          (request[2] & L.level > 2));
           requestUp   = ((request[3] & L.level < 3)|
                          (request[2] & L.level < 2)|
                          (request[1] & L.level < 1));
           doorsAreClosed = (not F[0].D.isOpen & not F[1].D.isOpen & not F[2].D.isOpen & not F[3].D.isOpen);
    trans  L.level=0 & request[0] |- open[0] -> ;
           L.level=1 & request[1] |- open[1] -> ;
           L.level=2 & request[2] |- open[2] -> ;
           L.level=3 & request[3] |- open[3] -> ;
           doorsAreClosed & ~lastMoveIsUp & requestDown                |- down -> lastMoveIsUp := false;
           doorsAreClosed & lastMoveIsUp  & requestDown & ~requestUp   |- down -> lastMoveIsUp := false;
           doorsAreClosed & lastMoveIsUp  & requestUp                  |- up   -> lastMoveIsUp := true;
           doorsAreClosed & ~lastMoveIsUp & requestUp   & ~requestDown |- up   -> lastMoveIsUp := true;
    sync   <F[0].close, L.close[0]>;
           <F[1].close, L.close[1]>;
           <F[2].close, L.close[2]>;
           <F[3].close, L.close[3]>;
           <open[0], F[0].open, L.open>;
           <open[1], F[1].open, L.open>;
           <open[2], F[2].open, L.open>;
           <open[3], F[3].open, L.open>;
           <down, L.down>;
           <up, L.up>;
edon